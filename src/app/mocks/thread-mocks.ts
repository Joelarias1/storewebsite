// src/app/mocks/thread-mocks.ts\n\n// --- Interfaces (podrían estar en un archivo central de tipos) ---\ninterface Author {\n  id: string;\n  name: string;\n  avatar: string;\n  title: string;\n  joinDate: Date;\n  postCount: number;\n}\n\ninterface Comment {\n  id: string;\n  author: Author;\n  content: string;\n  date: Date;\n  likes: number;\n  isLiked: boolean;\n}\n\nexport interface Thread { // Exportamos Thread para usarla en el componente\n  id: string;\n  title: string;\n  category: {\n    id: string;\n    name: string;\n  };\n  author: Author;\n  content: string;\n  date: Date;\n  tags: string[];\n  views: number;\n  comments: Comment[];\n  isLocked: boolean;\n  isPinned: boolean;\n}\n\n// --- Datos Simulados ---\n\nconst mockAuthor: Author = {\n  id: \'user123\',\n  name: \'dev_master\',\n  avatar: \'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-1.2.1&auto=format&fit=crop&w=128&q=80\',\n  title: \'Master Coder\',\n  joinDate: new Date(\'2022-01-10\'),\n  postCount: 356\n};\n\nconst mockComments: Comment[] = [\n  {\n    id: \'comment1\',\n    author: {\n      id: \'user456\',\n      name: \'angular_fan\',\n      avatar: \'https://images.unsplash.com/photo-1527980965255-d3b416303d12?ixlib=rb-1.2.1&auto=format&fit=crop&w=128&q=80\',\n      title: \'Frontend Enthusiast\',\n      joinDate: new Date(\'2022-05-15\'),\n      postCount: 128\n    },\n    content: `¡Excelente post! Muy útil para entender las novedades de Angular 16. <br><br> \n               ¿Alguien ha probado ya los signals en producción? Creo que el rendimiento mejora bastante, algo así:\n               <pre><code>\n// Ejemplo de uso de signal\nconst counter = signal(0);\n\n// Efecto que se ejecuta cuando counter cambia\neffect(() => {\n  console.log(\'El contador es:\', counter());\n});\n\ncounter.set(5); // Output: El contador es: 5\n               </code></pre>`,\n    date: new Date(\'2023-08-25T10:30:00\'),\n    likes: 15,\n    isLiked: false\n  },\n  {\n    id: \'comment2\',\n    author: {\n      id: \'user789\',\n      name: \'react_dev\',\n      avatar: \'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-1.2.1&auto=format&fit=crop&w=128&q=80\',\n      title: \'React Developer\',\n      joinDate: new Date(\'2021-11-20\'),\n      postCount: 85\n    },\n    content: \'Aunque uso React, este artículo es muy interesante. Angular ha avanzado mucho. Buen trabajo.\',\n    date: new Date(\'2023-08-25T11:15:00\'),\n    likes: 8,\n    isLiked: true\n  }\n];\n\nexport const MOCK_THREAD: Thread = {\n  id: \'1\', // ID fijo para este mock\n  title: \'Mejores prácticas con Angular 16\',\n  category: { id: \'1\', name: \'Desarrollo Frontend\' },\n  author: mockAuthor,\n  content: `\nAngular 16 ha traído consigo un montón de novedades interesantes que mejoran la experiencia de desarrollo y el rendimiento de las aplicaciones. En este post, vamos a explorar algunas de las **mejores prácticas** para aprovechar al máximo esta nueva versión.\n\n### 1. Signals para la gestión del estado\n\nUna de las características más destacadas son los **Signals**. Ofrecen un nuevo paradigma para la gestión del estado reactivo que es más granular y eficiente que \`async\` pipe y \`ChangeDetectionStrategy.OnPush\`.\n\n\`\`\`typescript\nimport { signal, computed } from \'@angular/core\';\n\nconst count = signal(0);\nconst doubleCount = computed(() => count() * 2);\n\nconsole.log(doubleCount()); // 0\n\ncount.set(5);\nconsole.log(doubleCount()); // 10\n\`\`\`\n\n### 2. Required Inputs\n\nAhora puedes marcar los \`@Input()\` como obligatorios, lo que mejora la seguridad y la claridad de los componentes.\n\n\`\`\`typescript\n@Component({ /* ... */ })\nexport class MyComponent {\n  @Input({ required: true }) userName!: string;\n}\n\`\`\`\n\n### 3. DestroyRef para la limpieza\n\nEl nuevo \`DestroyRef\` simplifica la gestión de la desuscripción de Observables y otras tareas de limpieza.\n\n\`\`\`typescript\n@Component({ /* ... */ })\nexport class DataFetcherComponent {\n  private destroyRef = inject(DestroyRef);\n\n  constructor(private dataService: DataService) {\n    const subscription = this.dataService.getData().subscribe(/* ... */);\n    this.destroyRef.onDestroy(() => subscription.unsubscribe());\n  }\n}\n\`\`\`\n\n### 4. Standalone Components por defecto\n\nAngular CLI ahora genera \`standalone components\` por defecto, fomentando una arquitectura más modular y simplificada.\n\n---\n\nEstas son solo algunas de las mejoras clave. ¿Qué otras prácticas recomiendan ustedes para trabajar con Angular 16? ¡Compartan sus experiencias en los comentarios!\n  `,\n  date: new Date(\'2023-08-25T09:00:00\'),\n  tags: [\'angular\', \'frontend\', \'javascript\', \'typescript\', \'signals\'],\n  views: 1358,\n  comments: mockComments,\n  isLocked: false,\n  isPinned: true\n};\n 